/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "reactnativekeyboardcontrollerJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_setInputMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->setInputMode(
    rt,
    args[0].asNumber()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_setDefaultMode(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->setDefaultMode(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_preload(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->preload(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_dismiss(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->dismiss(
    rt,
    args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_setFocusTo(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->setFocusTo(
    rt,
    args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_addListener(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->addListener(
    rt,
    args[0].asString(rt)
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeKeyboardControllerCxxSpecJSI_removeListeners(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeKeyboardControllerCxxSpecJSI *>(&turboModule)->removeListeners(
    rt,
    args[0].asNumber()
  );
  return jsi::Value::undefined();
}

NativeKeyboardControllerCxxSpecJSI::NativeKeyboardControllerCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("KeyboardController", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeKeyboardControllerCxxSpecJSI_getConstants};
  methodMap_["setInputMode"] = MethodMetadata {1, __hostFunction_NativeKeyboardControllerCxxSpecJSI_setInputMode};
  methodMap_["setDefaultMode"] = MethodMetadata {0, __hostFunction_NativeKeyboardControllerCxxSpecJSI_setDefaultMode};
  methodMap_["preload"] = MethodMetadata {0, __hostFunction_NativeKeyboardControllerCxxSpecJSI_preload};
  methodMap_["dismiss"] = MethodMetadata {1, __hostFunction_NativeKeyboardControllerCxxSpecJSI_dismiss};
  methodMap_["setFocusTo"] = MethodMetadata {1, __hostFunction_NativeKeyboardControllerCxxSpecJSI_setFocusTo};
  methodMap_["addListener"] = MethodMetadata {1, __hostFunction_NativeKeyboardControllerCxxSpecJSI_addListener};
  methodMap_["removeListeners"] = MethodMetadata {1, __hostFunction_NativeKeyboardControllerCxxSpecJSI_removeListeners};
}
static jsi::Value __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_getConstants(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeStatusBarManagerCompatCxxSpecJSI *>(&turboModule)->getConstants(
    rt
  );
}
static jsi::Value __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setHidden(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeStatusBarManagerCompatCxxSpecJSI *>(&turboModule)->setHidden(
    rt,
    args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setColor(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeStatusBarManagerCompatCxxSpecJSI *>(&turboModule)->setColor(
    rt,
    args[0].asNumber(),
    args[1].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setTranslucent(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeStatusBarManagerCompatCxxSpecJSI *>(&turboModule)->setTranslucent(
    rt,
    args[0].asBool()
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setStyle(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeStatusBarManagerCompatCxxSpecJSI *>(&turboModule)->setStyle(
    rt,
    args[0].asString(rt)
  );
  return jsi::Value::undefined();
}

NativeStatusBarManagerCompatCxxSpecJSI::NativeStatusBarManagerCompatCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("StatusBarManagerCompat", jsInvoker) {
  methodMap_["getConstants"] = MethodMetadata {0, __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_getConstants};
  methodMap_["setHidden"] = MethodMetadata {1, __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setHidden};
  methodMap_["setColor"] = MethodMetadata {2, __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setColor};
  methodMap_["setTranslucent"] = MethodMetadata {1, __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setTranslucent};
  methodMap_["setStyle"] = MethodMetadata {1, __hostFunction_NativeStatusBarManagerCompatCxxSpecJSI_setStyle};
}


} // namespace facebook::react
